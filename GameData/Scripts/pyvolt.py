# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyvolt', [dirname(__file__)])
        except ImportError:
            import _pyvolt
            return _pyvolt
        if fp is not None:
            try:
                _mod = imp.load_module('_pyvolt', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyvolt = swig_import_helper()
    del swig_import_helper
else:
    import _pyvolt
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyvolt.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pyvolt.SwigPyIterator_value(self)
    def incr(self, n = 1): return _pyvolt.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _pyvolt.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pyvolt.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pyvolt.SwigPyIterator_equal(self, *args)
    def copy(self): return _pyvolt.SwigPyIterator_copy(self)
    def next(self): return _pyvolt.SwigPyIterator_next(self)
    def __next__(self): return _pyvolt.SwigPyIterator___next__(self)
    def previous(self): return _pyvolt.SwigPyIterator_previous(self)
    def advance(self, *args): return _pyvolt.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pyvolt.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pyvolt.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pyvolt.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pyvolt.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pyvolt.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pyvolt.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pyvolt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyvolt.new_Color(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["RGB"] = lambda x: _pyvolt.Color_RGB
    if _newclass:RGB = staticmethod(_pyvolt.Color_RGB)
    __swig_getmethods__["RGBA"] = lambda x: _pyvolt.Color_RGBA
    if _newclass:RGBA = staticmethod(_pyvolt.Color_RGBA)
    __swig_getmethods__["Random"] = lambda x: _pyvolt.Color_Random
    if _newclass:Random = staticmethod(_pyvolt.Color_Random)
    def Clamp(self): return _pyvolt.Color_Clamp(self)
    def Intensity(self): return _pyvolt.Color_Intensity(self)
    def __ne__(self, *args): return _pyvolt.Color___ne__(self, *args)
    def Load(self, *args): return _pyvolt.Color_Load(self, *args)
    def Save(self, *args): return _pyvolt.Color_Save(self, *args)
    __swig_setmethods__["r"] = _pyvolt.Color_r_set
    __swig_getmethods__["r"] = _pyvolt.Color_r_get
    if _newclass:r = _swig_property(_pyvolt.Color_r_get, _pyvolt.Color_r_set)
    __swig_setmethods__["g"] = _pyvolt.Color_g_set
    __swig_getmethods__["g"] = _pyvolt.Color_g_get
    if _newclass:g = _swig_property(_pyvolt.Color_g_get, _pyvolt.Color_g_set)
    __swig_setmethods__["b"] = _pyvolt.Color_b_set
    __swig_getmethods__["b"] = _pyvolt.Color_b_get
    if _newclass:b = _swig_property(_pyvolt.Color_b_get, _pyvolt.Color_b_set)
    __swig_setmethods__["a"] = _pyvolt.Color_a_set
    __swig_getmethods__["a"] = _pyvolt.Color_a_get
    if _newclass:a = _swig_property(_pyvolt.Color_a_get, _pyvolt.Color_a_set)
    __swig_setmethods__["white"] = _pyvolt.Color_white_set
    __swig_getmethods__["white"] = _pyvolt.Color_white_get
    if _newclass:white = _swig_property(_pyvolt.Color_white_get, _pyvolt.Color_white_set)
    __swig_setmethods__["grey"] = _pyvolt.Color_grey_set
    __swig_getmethods__["grey"] = _pyvolt.Color_grey_get
    if _newclass:grey = _swig_property(_pyvolt.Color_grey_get, _pyvolt.Color_grey_set)
    __swig_setmethods__["black"] = _pyvolt.Color_black_set
    __swig_getmethods__["black"] = _pyvolt.Color_black_get
    if _newclass:black = _swig_property(_pyvolt.Color_black_get, _pyvolt.Color_black_set)
    __swig_setmethods__["red"] = _pyvolt.Color_red_set
    __swig_getmethods__["red"] = _pyvolt.Color_red_get
    if _newclass:red = _swig_property(_pyvolt.Color_red_get, _pyvolt.Color_red_set)
    __swig_setmethods__["green"] = _pyvolt.Color_green_set
    __swig_getmethods__["green"] = _pyvolt.Color_green_get
    if _newclass:green = _swig_property(_pyvolt.Color_green_get, _pyvolt.Color_green_set)
    __swig_setmethods__["blue"] = _pyvolt.Color_blue_set
    __swig_getmethods__["blue"] = _pyvolt.Color_blue_get
    if _newclass:blue = _swig_property(_pyvolt.Color_blue_get, _pyvolt.Color_blue_set)
    __swig_setmethods__["yellow"] = _pyvolt.Color_yellow_set
    __swig_getmethods__["yellow"] = _pyvolt.Color_yellow_get
    if _newclass:yellow = _swig_property(_pyvolt.Color_yellow_get, _pyvolt.Color_yellow_set)
    __swig_setmethods__["orange"] = _pyvolt.Color_orange_set
    __swig_getmethods__["orange"] = _pyvolt.Color_orange_get
    if _newclass:orange = _swig_property(_pyvolt.Color_orange_get, _pyvolt.Color_orange_set)
    __swig_setmethods__["purple"] = _pyvolt.Color_purple_set
    __swig_getmethods__["purple"] = _pyvolt.Color_purple_get
    if _newclass:purple = _swig_property(_pyvolt.Color_purple_get, _pyvolt.Color_purple_set)
    __swig_destroy__ = _pyvolt.delete_Color
    __del__ = lambda self : None;
Color_swigregister = _pyvolt.Color_swigregister
Color_swigregister(Color)

def Color_RGB(*args):
  return _pyvolt.Color_RGB(*args)
Color_RGB = _pyvolt.Color_RGB

def Color_RGBA(*args):
  return _pyvolt.Color_RGBA(*args)
Color_RGBA = _pyvolt.Color_RGBA

def Color_Random():
  return _pyvolt.Color_Random()
Color_Random = _pyvolt.Color_Random
cvar = _pyvolt.cvar


def __add__(*args):
  return _pyvolt.__add__(*args)
__add__ = _pyvolt.__add__

def __sub__(*args):
  return _pyvolt.__sub__(*args)
__sub__ = _pyvolt.__sub__
INFINITY = _pyvolt.INFINITY

def RoundToNearest(*args):
  return _pyvolt.RoundToNearest(*args)
RoundToNearest = _pyvolt.RoundToNearest
class Random(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Random, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Random, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Seed"] = lambda x: _pyvolt.Random_Seed
    if _newclass:Seed = staticmethod(_pyvolt.Random_Seed)
    __swig_getmethods__["Range"] = lambda x: _pyvolt.Random_Range
    if _newclass:Range = staticmethod(_pyvolt.Random_Range)
    __swig_getmethods__["Percent"] = lambda x: _pyvolt.Random_Percent
    if _newclass:Percent = staticmethod(_pyvolt.Random_Percent)
    __swig_getmethods__["CoinFlip"] = lambda x: _pyvolt.Random_CoinFlip
    if _newclass:CoinFlip = staticmethod(_pyvolt.Random_CoinFlip)
    __swig_getmethods__["RangeFloat"] = lambda x: _pyvolt.Random_RangeFloat
    if _newclass:RangeFloat = staticmethod(_pyvolt.Random_RangeFloat)
    def __init__(self): 
        this = _pyvolt.new_Random()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyvolt.delete_Random
    __del__ = lambda self : None;
Random_swigregister = _pyvolt.Random_swigregister
Random_swigregister(Random)
PI = cvar.PI
E = cvar.E
DEG2RAD = cvar.DEG2RAD
RAD2DEG = cvar.RAD2DEG

def Random_Seed(*args):
  return _pyvolt.Random_Seed(*args)
Random_Seed = _pyvolt.Random_Seed

def Random_Range(*args):
  return _pyvolt.Random_Range(*args)
Random_Range = _pyvolt.Random_Range

def Random_Percent():
  return _pyvolt.Random_Percent()
Random_Percent = _pyvolt.Random_Percent

def Random_CoinFlip():
  return _pyvolt.Random_CoinFlip()
Random_CoinFlip = _pyvolt.Random_CoinFlip

def Random_RangeFloat(*args):
  return _pyvolt.Random_RangeFloat(*args)
Random_RangeFloat = _pyvolt.Random_RangeFloat


def GetMicroseconds():
  return _pyvolt.GetMicroseconds()
GetMicroseconds = _pyvolt.GetMicroseconds

def GetTimestamp(*args):
  return _pyvolt.GetTimestamp(*args)
GetTimestamp = _pyvolt.GetTimestamp

def SleepMicroseconds(*args):
  return _pyvolt.SleepMicroseconds(*args)
SleepMicroseconds = _pyvolt.SleepMicroseconds

def GetExecutableDirectory(*args):
  return _pyvolt.GetExecutableDirectory(*args)
GetExecutableDirectory = _pyvolt.GetExecutableDirectory

def GetAllFilesInDirectory(*args):
  return _pyvolt.GetAllFilesInDirectory(*args)
GetAllFilesInDirectory = _pyvolt.GetAllFilesInDirectory

def PrintStackTrace():
  return _pyvolt.PrintStackTrace()
PrintStackTrace = _pyvolt.PrintStackTrace
class Time(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Time, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Time, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyvolt.new_Time()
        try: self.this.append(this)
        except: self.this = this
    def Start(self): return _pyvolt.Time_Start(self)
    def GetMilliseconds(self): return _pyvolt.Time_GetMilliseconds(self)
    __swig_destroy__ = _pyvolt.delete_Time
    __del__ = lambda self : None;
Time_swigregister = _pyvolt.Time_swigregister
Time_swigregister(Time)

class Vector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pyvolt.Vector2_x_set
    __swig_getmethods__["x"] = _pyvolt.Vector2_x_get
    if _newclass:x = _swig_property(_pyvolt.Vector2_x_get, _pyvolt.Vector2_x_set)
    __swig_setmethods__["y"] = _pyvolt.Vector2_y_set
    __swig_getmethods__["y"] = _pyvolt.Vector2_y_get
    if _newclass:y = _swig_property(_pyvolt.Vector2_y_get, _pyvolt.Vector2_y_set)
    __swig_setmethods__["zero"] = _pyvolt.Vector2_zero_set
    __swig_getmethods__["zero"] = _pyvolt.Vector2_zero_get
    if _newclass:zero = _swig_property(_pyvolt.Vector2_zero_get, _pyvolt.Vector2_zero_set)
    __swig_setmethods__["one"] = _pyvolt.Vector2_one_set
    __swig_getmethods__["one"] = _pyvolt.Vector2_one_get
    if _newclass:one = _swig_property(_pyvolt.Vector2_one_get, _pyvolt.Vector2_one_set)
    __swig_setmethods__["down"] = _pyvolt.Vector2_down_set
    __swig_getmethods__["down"] = _pyvolt.Vector2_down_get
    if _newclass:down = _swig_property(_pyvolt.Vector2_down_get, _pyvolt.Vector2_down_set)
    __swig_setmethods__["up"] = _pyvolt.Vector2_up_set
    __swig_getmethods__["up"] = _pyvolt.Vector2_up_get
    if _newclass:up = _swig_property(_pyvolt.Vector2_up_get, _pyvolt.Vector2_up_set)
    __swig_setmethods__["left"] = _pyvolt.Vector2_left_set
    __swig_getmethods__["left"] = _pyvolt.Vector2_left_get
    if _newclass:left = _swig_property(_pyvolt.Vector2_left_get, _pyvolt.Vector2_left_set)
    __swig_setmethods__["right"] = _pyvolt.Vector2_right_set
    __swig_getmethods__["right"] = _pyvolt.Vector2_right_get
    if _newclass:right = _swig_property(_pyvolt.Vector2_right_get, _pyvolt.Vector2_right_set)
    def __init__(self, *args): 
        this = _pyvolt.new_Vector2(*args)
        try: self.this.append(this)
        except: self.this = this
    def ToB2(self): return _pyvolt.Vector2_ToB2(self)
    def Set(self, *args): return _pyvolt.Vector2_Set(self, *args)
    def SetFromAngleDegrees(self, *args): return _pyvolt.Vector2_SetFromAngleDegrees(self, *args)
    __swig_getmethods__["Random"] = lambda x: _pyvolt.Vector2_Random
    if _newclass:Random = staticmethod(_pyvolt.Vector2_Random)
    def LengthSquared(self): return _pyvolt.Vector2_LengthSquared(self)
    def Length(self): return _pyvolt.Vector2_Length(self)
    def GetNormalized(self): return _pyvolt.Vector2_GetNormalized(self)
    def Normalize(self): return _pyvolt.Vector2_Normalize(self)
    def Clamp(self, *args): return _pyvolt.Vector2_Clamp(self, *args)
    def IsInRange(self, *args): return _pyvolt.Vector2_IsInRange(self, *args)
    def DistanceTo(self, *args): return _pyvolt.Vector2_DistanceTo(self, *args)
    def GetPerpendicularLeft(self): return _pyvolt.Vector2_GetPerpendicularLeft(self)
    def GetPerpendicularRight(self): return _pyvolt.Vector2_GetPerpendicularRight(self)
    def Dot(self, *args): return _pyvolt.Vector2_Dot(self, *args)
    def Cross(self, *args): return _pyvolt.Vector2_Cross(self, *args)
    def Reflect(self, *args): return _pyvolt.Vector2_Reflect(self, *args)
    def Project(self, *args): return _pyvolt.Vector2_Project(self, *args)
    def Rotate(self, *args): return _pyvolt.Vector2_Rotate(self, *args)
    def GetAngleRadians(self): return _pyvolt.Vector2_GetAngleRadians(self)
    def GetAngleDegrees(self): return _pyvolt.Vector2_GetAngleDegrees(self)
    def AngleTo(self, *args): return _pyvolt.Vector2_AngleTo(self, *args)
    def xx(self): return _pyvolt.Vector2_xx(self)
    def yy(self): return _pyvolt.Vector2_yy(self)
    def yx(self): return _pyvolt.Vector2_yx(self)
    def __eq__(self, *args): return _pyvolt.Vector2___eq__(self, *args)
    def __ne__(self, *args): return _pyvolt.Vector2___ne__(self, *args)
    def __iadd__(self, *args): return _pyvolt.Vector2___iadd__(self, *args)
    def __isub__(self, *args): return _pyvolt.Vector2___isub__(self, *args)
    def __imul__(self, *args): return _pyvolt.Vector2___imul__(self, *args)
    def __idiv__(self, *args): return _pyvolt.Vector2___idiv__(self, *args)
    def __add__(self, *args): return _pyvolt.Vector2___add__(self, *args)
    def __sub__(self, *args): return _pyvolt.Vector2___sub__(self, *args)
    def __neg__(self): return _pyvolt.Vector2___neg__(self)
    def __div__(self, *args): return _pyvolt.Vector2___div__(self, *args)
    def __mul__(self, *args): return _pyvolt.Vector2___mul__(self, *args)
    def Load(self, *args): return _pyvolt.Vector2_Load(self, *args)
    def Save(self, *args): return _pyvolt.Vector2_Save(self, *args)
    def __str__(self): return _pyvolt.Vector2___str__(self)
    __swig_destroy__ = _pyvolt.delete_Vector2
    __del__ = lambda self : None;
Vector2_swigregister = _pyvolt.Vector2_swigregister
Vector2_swigregister(Vector2)

def Vector2_Random():
  return _pyvolt.Vector2_Random()
Vector2_Random = _pyvolt.Vector2_Random

class Transform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Transform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyvolt.new_Transform(*args)
        try: self.this.append(this)
        except: self.this = this
    def LerpTransform(self, *args): return _pyvolt.Transform_LerpTransform(self, *args)
    def GetDirectionVector(self): return _pyvolt.Transform_GetDirectionVector(self)
    __swig_setmethods__["position"] = _pyvolt.Transform_position_set
    __swig_getmethods__["position"] = _pyvolt.Transform_position_get
    if _newclass:position = _swig_property(_pyvolt.Transform_position_get, _pyvolt.Transform_position_set)
    __swig_setmethods__["rotation"] = _pyvolt.Transform_rotation_set
    __swig_getmethods__["rotation"] = _pyvolt.Transform_rotation_get
    if _newclass:rotation = _swig_property(_pyvolt.Transform_rotation_get, _pyvolt.Transform_rotation_set)
    __swig_setmethods__["scale"] = _pyvolt.Transform_scale_set
    __swig_getmethods__["scale"] = _pyvolt.Transform_scale_get
    if _newclass:scale = _swig_property(_pyvolt.Transform_scale_get, _pyvolt.Transform_scale_set)
    def Apply(self, *args): return _pyvolt.Transform_Apply(self, *args)
    def ApplyInverse(self, *args): return _pyvolt.Transform_ApplyInverse(self, *args)
    def Load(self, *args): return _pyvolt.Transform_Load(self, *args)
    def Save(self, *args): return _pyvolt.Transform_Save(self, *args)
    def xAxis(self): return _pyvolt.Transform_xAxis(self)
    def yAxis(self): return _pyvolt.Transform_yAxis(self)
    def Multiply(self, *args): return _pyvolt.Transform_Multiply(self, *args)
    __swig_destroy__ = _pyvolt.delete_Transform
    __del__ = lambda self : None;
Transform_swigregister = _pyvolt.Transform_swigregister
Transform_swigregister(Transform)

def __mul__(*args):
  return _pyvolt.__mul__(*args)
__mul__ = _pyvolt.__mul__

def __div__(*args):
  return _pyvolt.__div__(*args)
__div__ = _pyvolt.__div__

def __rshift__(*args):
  return _pyvolt.__rshift__(*args)
__rshift__ = _pyvolt.__rshift__

class BBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BBox, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min"] = _pyvolt.BBox_min_set
    __swig_getmethods__["min"] = _pyvolt.BBox_min_get
    if _newclass:min = _swig_property(_pyvolt.BBox_min_get, _pyvolt.BBox_min_set)
    __swig_setmethods__["max"] = _pyvolt.BBox_max_set
    __swig_getmethods__["max"] = _pyvolt.BBox_max_get
    if _newclass:max = _swig_property(_pyvolt.BBox_max_get, _pyvolt.BBox_max_set)
    def __init__(self, *args): 
        this = _pyvolt.new_BBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def center(self): return _pyvolt.BBox_center(self)
    def extents(self): return _pyvolt.BBox_extents(self)
    def Union(self, *args): return _pyvolt.BBox_Union(self, *args)
    def IsInside(self, *args): return _pyvolt.BBox_IsInside(self, *args)
    def BoundingCircle(self, *args): return _pyvolt.BBox_BoundingCircle(self, *args)
    def Intersects(self, *args): return _pyvolt.BBox_Intersects(self, *args)
    def Expand(self, *args): return _pyvolt.BBox_Expand(self, *args)
    __swig_destroy__ = _pyvolt.delete_BBox
    __del__ = lambda self : None;
BBox_swigregister = _pyvolt.BBox_swigregister
BBox_swigregister(BBox)

class Vector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pyvolt.Vector3_x_set
    __swig_getmethods__["x"] = _pyvolt.Vector3_x_get
    if _newclass:x = _swig_property(_pyvolt.Vector3_x_get, _pyvolt.Vector3_x_set)
    __swig_setmethods__["y"] = _pyvolt.Vector3_y_set
    __swig_getmethods__["y"] = _pyvolt.Vector3_y_get
    if _newclass:y = _swig_property(_pyvolt.Vector3_y_get, _pyvolt.Vector3_y_set)
    __swig_setmethods__["z"] = _pyvolt.Vector3_z_set
    __swig_getmethods__["z"] = _pyvolt.Vector3_z_get
    if _newclass:z = _swig_property(_pyvolt.Vector3_z_get, _pyvolt.Vector3_z_set)
    __swig_setmethods__["zero"] = _pyvolt.Vector3_zero_set
    __swig_getmethods__["zero"] = _pyvolt.Vector3_zero_get
    if _newclass:zero = _swig_property(_pyvolt.Vector3_zero_get, _pyvolt.Vector3_zero_set)
    __swig_setmethods__["one"] = _pyvolt.Vector3_one_set
    __swig_getmethods__["one"] = _pyvolt.Vector3_one_get
    if _newclass:one = _swig_property(_pyvolt.Vector3_one_get, _pyvolt.Vector3_one_set)
    __swig_setmethods__["down"] = _pyvolt.Vector3_down_set
    __swig_getmethods__["down"] = _pyvolt.Vector3_down_get
    if _newclass:down = _swig_property(_pyvolt.Vector3_down_get, _pyvolt.Vector3_down_set)
    __swig_setmethods__["up"] = _pyvolt.Vector3_up_set
    __swig_getmethods__["up"] = _pyvolt.Vector3_up_get
    if _newclass:up = _swig_property(_pyvolt.Vector3_up_get, _pyvolt.Vector3_up_set)
    __swig_setmethods__["left"] = _pyvolt.Vector3_left_set
    __swig_getmethods__["left"] = _pyvolt.Vector3_left_get
    if _newclass:left = _swig_property(_pyvolt.Vector3_left_get, _pyvolt.Vector3_left_set)
    __swig_setmethods__["right"] = _pyvolt.Vector3_right_set
    __swig_getmethods__["right"] = _pyvolt.Vector3_right_get
    if _newclass:right = _swig_property(_pyvolt.Vector3_right_get, _pyvolt.Vector3_right_set)
    def __init__(self, *args): 
        this = _pyvolt.new_Vector3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyvolt.delete_Vector3
    __del__ = lambda self : None;
Vector3_swigregister = _pyvolt.Vector3_swigregister
Vector3_swigregister(Vector3)

class Entity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Entity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Entity, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyvolt.delete_Entity
    __del__ = lambda self : None;
    def layer(self): return _pyvolt.Entity_layer(self)
    def IsOnLayer(self, *args): return _pyvolt.Entity_IsOnLayer(self, *args)
    def SetLayer(self, *args): return _pyvolt.Entity_SetLayer(self, *args)
    def Clone(self): return _pyvolt.Entity_Clone(self)
    def CopyFrom(self, *args): return _pyvolt.Entity_CopyFrom(self, *args)
    def scene(self): return _pyvolt.Entity_scene(self)
    def HasTag(self, *args): return _pyvolt.Entity_HasTag(self, *args)
    def AddTag(self, *args): return _pyvolt.Entity_AddTag(self, *args)
    def RemoveTag(self, *args): return _pyvolt.Entity_RemoveTag(self, *args)
    def GetTags(self, *args): return _pyvolt.Entity_GetTags(self, *args)
    def numTags(self): return _pyvolt.Entity_numTags(self)
    def Update(self): return _pyvolt.Entity_Update(self)
    def Render(self): return _pyvolt.Entity_Render(self)
    def OnAdded(self): return _pyvolt.Entity_OnAdded(self)
    def OnRemoved(self): return _pyvolt.Entity_OnRemoved(self)
    def UpdatePhysics(self): return _pyvolt.Entity_UpdatePhysics(self)
    def CreateBody(self, *args): return _pyvolt.Entity_CreateBody(self, *args)
    def DestroyBody(self): return _pyvolt.Entity_DestroyBody(self)
    def body(self): return _pyvolt.Entity_body(self)
    def BeginContact(self, *args): return _pyvolt.Entity_BeginContact(self, *args)
    def EndContact(self, *args): return _pyvolt.Entity_EndContact(self, *args)
    def PreSolve(self, *args): return _pyvolt.Entity_PreSolve(self, *args)
    def CanCollideWith(self, *args): return _pyvolt.Entity_CanCollideWith(self, *args)
    def RemoveSelf(self): return _pyvolt.Entity_RemoveSelf(self)
    def transform(self): return _pyvolt.Entity_transform(self)
    def position(self): return _pyvolt.Entity_position(self)
    def SetPosition(self, *args): return _pyvolt.Entity_SetPosition(self, *args)
    def rotation(self): return _pyvolt.Entity_rotation(self)
    def SetRotation(self, *args): return _pyvolt.Entity_SetRotation(self, *args)
    def scale(self): return _pyvolt.Entity_scale(self)
    def SetScale(self, *args): return _pyvolt.Entity_SetScale(self, *args)
    def OnScaleChanged(self): return _pyvolt.Entity_OnScaleChanged(self)
    def Load(self, *args): return _pyvolt.Entity_Load(self, *args)
    def Save(self, *args): return _pyvolt.Entity_Save(self, *args)
Entity_swigregister = _pyvolt.Entity_swigregister
Entity_swigregister(Entity)

class Game(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Game, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Game, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyvolt.new_Game(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyvolt.delete_Game
    __del__ = lambda self : None;
    def Run(self): return _pyvolt.Game_Run(self)
    def Quit(self): return _pyvolt.Game_Quit(self)
    def fps(self): return _pyvolt.Game_fps(self)
    def currentScene(self): return _pyvolt.Game_currentScene(self)
    def SetScene(self, *args): return _pyvolt.Game_SetScene(self, *args)
    __swig_getmethods__["Register"] = lambda x: _pyvolt.Game_Register
    if _newclass:Register = staticmethod(_pyvolt.Game_Register)
    __swig_getmethods__["Instance"] = lambda x: _pyvolt.Game_Instance
    if _newclass:Instance = staticmethod(_pyvolt.Game_Instance)
    def OnKeyEvent(self, *args): return _pyvolt.Game_OnKeyEvent(self, *args)
    def OnMouseButtonEvent(self, *args): return _pyvolt.Game_OnMouseButtonEvent(self, *args)
    def OnMouseMoveEvent(self, *args): return _pyvolt.Game_OnMouseMoveEvent(self, *args)
Game_swigregister = _pyvolt.Game_swigregister
Game_swigregister(Game)

def __lshift__(*args):
  return _pyvolt.__lshift__(*args)
__lshift__ = _pyvolt.__lshift__

def Game_Register(*args):
  return _pyvolt.Game_Register(*args)
Game_Register = _pyvolt.Game_Register

def Game_Instance():
  return _pyvolt.Game_Instance()
Game_Instance = _pyvolt.Game_Instance

class Camera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyvolt.new_Camera()
        try: self.this.append(this)
        except: self.this = this
    def ApplyMatrix(self): return _pyvolt.Camera_ApplyMatrix(self)
    def Update(self): return _pyvolt.Camera_Update(self)
    def SetLayers(self, *args): return _pyvolt.Camera_SetLayers(self, *args)
    def backLayer(self): return _pyvolt.Camera_backLayer(self)
    def frontLayer(self): return _pyvolt.Camera_frontLayer(self)
    def WatchEntity(self, *args): return _pyvolt.Camera_WatchEntity(self, *args)
    def WorldToScreen(self, *args): return _pyvolt.Camera_WorldToScreen(self, *args)
    def ScreenToWorld(self, *args): return _pyvolt.Camera_ScreenToWorld(self, *args)
    def worldBounds(self): return _pyvolt.Camera_worldBounds(self)
    __swig_setmethods__["transform"] = _pyvolt.Camera_transform_set
    __swig_getmethods__["transform"] = _pyvolt.Camera_transform_get
    if _newclass:transform = _swig_property(_pyvolt.Camera_transform_get, _pyvolt.Camera_transform_set)
    __swig_destroy__ = _pyvolt.delete_Camera
    __del__ = lambda self : None;
Camera_swigregister = _pyvolt.Camera_swigregister
Camera_swigregister(Camera)

class SceneListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SceneListener, name)
    __repr__ = _swig_repr
    def OnEntityAdded(self, *args): return _pyvolt.SceneListener_OnEntityAdded(self, *args)
    def OnEntityRemoved(self, *args): return _pyvolt.SceneListener_OnEntityRemoved(self, *args)
    def __init__(self): 
        this = _pyvolt.new_SceneListener()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyvolt.delete_SceneListener
    __del__ = lambda self : None;
SceneListener_swigregister = _pyvolt.SceneListener_swigregister
SceneListener_swigregister(SceneListener)

class Scene(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scene, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scene, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyvolt.new_Scene()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyvolt.delete_Scene
    __del__ = lambda self : None;
    def Render(self): return _pyvolt.Scene_Render(self)
    def Update(self): return _pyvolt.Scene_Update(self)
    def OnBegin(self): return _pyvolt.Scene_OnBegin(self)
    def OnEnd(self): return _pyvolt.Scene_OnEnd(self)
    def OnPreRender(self): return _pyvolt.Scene_OnPreRender(self)
    def OnPostRender(self): return _pyvolt.Scene_OnPostRender(self)
    def Add(self, *args): return _pyvolt.Scene_Add(self, *args)
    def Remove(self, *args): return _pyvolt.Scene_Remove(self, *args)
    def RemoveAll(self): return _pyvolt.Scene_RemoveAll(self)
    def OnEntityLayerChange(self, *args): return _pyvolt.Scene_OnEntityLayerChange(self, *args)
    def OnEntityTagAdd(self, *args): return _pyvolt.Scene_OnEntityTagAdd(self, *args)
    def OnEntityTagRemove(self, *args): return _pyvolt.Scene_OnEntityTagRemove(self, *args)
    def OnKeyEvent(self, *args): return _pyvolt.Scene_OnKeyEvent(self, *args)
    def OnMouseButtonEvent(self, *args): return _pyvolt.Scene_OnMouseButtonEvent(self, *args)
    def OnMouseMoveEvent(self, *args): return _pyvolt.Scene_OnMouseMoveEvent(self, *args)
    def numFilters(self): return _pyvolt.Scene_numFilters(self)
    def AddFilter(self, *args): return _pyvolt.Scene_AddFilter(self, *args)
    def RemoveFilter(self, *args): return _pyvolt.Scene_RemoveFilter(self, *args)
    def camera(self): return _pyvolt.Scene_camera(self)
    def GetEntitiesAtPoint(self, *args): return _pyvolt.Scene_GetEntitiesAtPoint(self, *args)
    def GetEntitiesInArea(self, *args): return _pyvolt.Scene_GetEntitiesInArea(self, *args)
    def GetLayerEntityCounts(self, *args): return _pyvolt.Scene_GetLayerEntityCounts(self, *args)
    def GetEntities(self, *args): return _pyvolt.Scene_GetEntities(self, *args)
    def SetHook(self, *args): return _pyvolt.Scene_SetHook(self, *args)
    def AddSceneListener(self, *args): return _pyvolt.Scene_AddSceneListener(self, *args)
    def RemoveSceneListener(self, *args): return _pyvolt.Scene_RemoveSceneListener(self, *args)
    def GetFirstTagged(self, *args): return _pyvolt.Scene_GetFirstTagged(self, *args)
    def GetAllTagged(self, *args): return _pyvolt.Scene_GetAllTagged(self, *args)
Scene_swigregister = _pyvolt.Scene_swigregister
Scene_swigregister(Scene)



